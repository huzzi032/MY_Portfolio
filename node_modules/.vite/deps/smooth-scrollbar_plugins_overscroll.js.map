{
  "version": 3,
  "sources": ["../../smooth-scrollbar/src/plugins/overscroll/bounce.ts", "../../smooth-scrollbar/src/plugins/overscroll/glow.ts", "../../smooth-scrollbar/src/plugins/overscroll/index.ts"],
  "sourcesContent": ["import Scrollbar from 'smooth-scrollbar';\r\n\r\nimport { setStyle } from '../../utils/set-style';\r\n\r\nexport class Bounce {\r\n  constructor(\r\n    private _scrollbar: Scrollbar,\r\n  ) {}\r\n\r\n  render({ x = 0, y = 0 }) {\r\n    const {\r\n      size,\r\n      track,\r\n      offset,\r\n      contentEl,\r\n    } = this._scrollbar;\r\n\r\n    setStyle(contentEl, {\r\n      '-transform': `translate3d(${-(offset.x + x)}px, ${-(offset.y + y)}px, 0)`,\r\n    });\r\n\r\n    if (x) {\r\n      track.xAxis.show();\r\n\r\n      const scaleRatio = size.container.width / (size.container.width + Math.abs(x));\r\n\r\n      setStyle(track.xAxis.thumb.element, {\r\n        '-transform': `translate3d(${track.xAxis.thumb.offset}px, 0, 0) scale3d(${scaleRatio}, 1, 1)`,\r\n        '-transform-origin': x < 0 ? 'left' : 'right',\r\n      });\r\n    }\r\n\r\n    if (y) {\r\n      track.yAxis.show();\r\n\r\n      const scaleRatio = size.container.height / (size.container.height + Math.abs(y));\r\n\r\n      setStyle(track.yAxis.thumb.element, {\r\n        '-transform': `translate3d(0, ${track.yAxis.thumb.offset}px, 0) scale3d(1, ${scaleRatio}, 1)`,\r\n        '-transform-origin': y < 0 ? 'top' : 'bottom',\r\n      });\r\n    }\r\n\r\n    track.autoHideOnIdle();\r\n  }\r\n}\r\n", "import { clamp } from '../../utils';\r\nimport Scrollbar from 'smooth-scrollbar';\r\n\r\nimport { setStyle } from '../../utils/set-style';\r\n\r\nconst GLOW_MAX_OPACITY = 0.75;\r\nconst GLOW_MAX_OFFSET = 0.25;\r\n\r\nexport class Glow {\r\n  private _canvas = document.createElement('canvas');\r\n  private _ctx = this._canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n  private _touchX: number;\r\n  private _touchY: number;\r\n\r\n  constructor(\r\n    private _scrollbar: Scrollbar,\r\n  ) {\r\n    setStyle(this._canvas, {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      display: 'none',\r\n    });\r\n  }\r\n\r\n  mount() {\r\n    this._scrollbar.containerEl.appendChild(this._canvas);\r\n  }\r\n\r\n  unmount() {\r\n    if (this._canvas.parentNode) {\r\n      this._canvas.parentNode.removeChild(this._canvas);\r\n    }\r\n  }\r\n\r\n  adjust() {\r\n    const {\r\n      size,\r\n    } = this._scrollbar;\r\n\r\n    const DPR = window.devicePixelRatio || 1;\r\n\r\n    const nextWidth = size.container.width * DPR;\r\n    const nextHeight = size.container.height * DPR;\r\n\r\n    if (nextWidth === this._canvas.width && nextHeight === this._canvas.height) {\r\n      return;\r\n    }\r\n\r\n    this._canvas.width = nextWidth;\r\n    this._canvas.height = nextHeight;\r\n\r\n    this._ctx.scale(DPR, DPR);\r\n  }\r\n\r\n  recordTouch(event: TouchEvent) {\r\n    const touch = event.touches[event.touches.length - 1];\r\n\r\n    this._touchX = touch.clientX;\r\n    this._touchY = touch.clientY;\r\n  }\r\n\r\n  render({ x = 0, y = 0 }, color: string) {\r\n    if (!x && !y) {\r\n      setStyle(this._canvas, {\r\n        display: 'none',\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    setStyle(this._canvas, {\r\n      display: 'block',\r\n    });\r\n\r\n    const {\r\n      size,\r\n    } = this._scrollbar;\r\n\r\n    this._ctx.clearRect(0, 0, size.container.width, size.container.height);\r\n    this._ctx.fillStyle = color;\r\n\r\n    this._renderX(x);\r\n    this._renderY(y);\r\n  }\r\n\r\n  private _getMaxOverscroll(): number {\r\n    const options = this._scrollbar.options.plugins.overscroll;\r\n\r\n    return options && options.maxOverscroll ? options.maxOverscroll : 150;\r\n  }\r\n\r\n  private _renderX(strength: number) {\r\n    const {\r\n      size,\r\n    } = this._scrollbar;\r\n\r\n    const maxOverscroll = this._getMaxOverscroll();\r\n    const { width, height } = size.container;\r\n    const ctx = this._ctx;\r\n\r\n    ctx.save();\r\n\r\n    if (strength > 0) {\r\n      // glow on right side\r\n      // horizontally flip\r\n      ctx.transform(-1, 0, 0, 1, width, 0);\r\n    }\r\n\r\n    const opacity = clamp(Math.abs(strength) / maxOverscroll, 0, GLOW_MAX_OPACITY);\r\n    const startOffset = clamp(opacity, 0, GLOW_MAX_OFFSET) * width;\r\n\r\n    // controll point\r\n    const x = Math.abs(strength);\r\n    const y = this._touchY || (height / 2);\r\n\r\n    ctx.globalAlpha = opacity;\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, -startOffset);\r\n    ctx.quadraticCurveTo(x, y, 0, height + startOffset);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.restore();\r\n  }\r\n\r\n  private _renderY(strength: number) {\r\n    const {\r\n      size,\r\n    } = this._scrollbar;\r\n\r\n    const maxOverscroll = this._getMaxOverscroll();\r\n    const { width, height } = size.container;\r\n    const ctx = this._ctx;\r\n\r\n    ctx.save();\r\n\r\n    if (strength > 0) {\r\n      // glow on bottom side\r\n      // vertically flip\r\n      ctx.transform(1, 0, 0, -1, 0, height);\r\n    }\r\n\r\n    const opacity = clamp(Math.abs(strength) / maxOverscroll, 0, GLOW_MAX_OPACITY);\r\n    const startOffset = clamp(opacity, 0, GLOW_MAX_OFFSET) * width;\r\n\r\n    // controll point\r\n    const x = this._touchX || (width / 2);\r\n    const y = Math.abs(strength);\r\n\r\n    ctx.globalAlpha = opacity;\r\n    ctx.beginPath();\r\n    ctx.moveTo(-startOffset, 0);\r\n    ctx.quadraticCurveTo(x, y, width + startOffset, 0);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.restore();\r\n  }\r\n}\r\n", "import { clamp, debounce } from '../../utils';\r\nimport { ScrollbarPlugin } from 'smooth-scrollbar';\r\nimport { Bounce } from './bounce';\r\nimport { Glow } from './glow';\r\n\r\nexport enum OverscrollEffect {\r\n  BOUNCE = 'bounce',\r\n  GLOW = 'glow',\r\n}\r\n\r\nexport type Data2d = {\r\n  x: number,\r\n  y: number,\r\n};\r\n\r\nexport type OnScrollCallback = (this: OverscrollPlugin, position: Data2d) => void;\r\n\r\nexport type OverscrollOptions = {\r\n  effect?: OverscrollEffect,\r\n  onScroll?: OnScrollCallback,\r\n  damping: number,\r\n  maxOverscroll: number,\r\n  glowColor: string,\r\n};\r\n\r\nconst ALLOWED_EVENTS = /wheel|touch/;\r\n\r\nexport default class OverscrollPlugin extends ScrollbarPlugin {\r\n  static pluginName = 'overscroll';\r\n\r\n  static defaultOptions: OverscrollOptions = {\r\n    effect: OverscrollEffect.BOUNCE,\r\n    onScroll: undefined,\r\n    damping: 0.2,\r\n    maxOverscroll: 150,\r\n    glowColor: '#87ceeb',\r\n  };\r\n\r\n  options: OverscrollOptions;\r\n\r\n  private _glow = new Glow(this.scrollbar);\r\n  private _bounce = new Bounce(this.scrollbar);\r\n\r\n  private _wheelScrollBack = {\r\n    x: false,\r\n    y: false,\r\n  };\r\n  private _lockWheel = {\r\n    x: false,\r\n    y: false,\r\n  };\r\n\r\n  private get _isWheelLocked() {\r\n    return this._lockWheel.x || this._lockWheel.y;\r\n  }\r\n\r\n  private _touching = false;\r\n\r\n  private _lastEventType: string;\r\n\r\n  private _amplitude = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  private _position = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  private get _enabled() {\r\n    return !!this.options.effect;\r\n  }\r\n\r\n  // since we can't detect whether user release touchpad\r\n  // handle it with debounce is the best solution now, as a trade-off\r\n  private _releaseWheel = debounce(() => {\r\n    this._lockWheel.x = false;\r\n    this._lockWheel.y = false;\r\n  }, 30);\r\n\r\n  onInit() {\r\n    const {\r\n      _glow,\r\n      options,\r\n      scrollbar,\r\n    } = this;\r\n\r\n    // observe\r\n    let effect = options.effect;\r\n\r\n    Object.defineProperty(options, 'effect', {\r\n      get() {\r\n        return effect;\r\n      },\r\n      set(val) {\r\n        if (!val) {\r\n          effect = undefined;\r\n          return;\r\n        }\r\n\r\n        if (val !== OverscrollEffect.BOUNCE && val !== OverscrollEffect.GLOW) {\r\n          throw new TypeError(`unknow overscroll effect: ${val}`);\r\n        }\r\n\r\n        effect = val;\r\n\r\n        scrollbar.options.continuousScrolling = false;\r\n\r\n        if (val === OverscrollEffect.GLOW) {\r\n          _glow.mount();\r\n          _glow.adjust();\r\n        } else {\r\n          _glow.unmount();\r\n        }\r\n      },\r\n    });\r\n\r\n    options.effect = effect; // init\r\n  }\r\n\r\n  onUpdate() {\r\n    if (this.options.effect === OverscrollEffect.GLOW) {\r\n      this._glow.adjust();\r\n    }\r\n  }\r\n\r\n  onRender(remainMomentum: Data2d) {\r\n    if (!this._enabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.scrollbar.options.continuousScrolling) {\r\n      // turn off continuous scrolling\r\n      this.scrollbar.options.continuousScrolling = false;\r\n    }\r\n\r\n    let { x: nextX, y: nextY } = remainMomentum;\r\n\r\n    // transfer remain momentum to overscroll\r\n    if (!this._amplitude.x &&\r\n        this._willOverscroll('x', remainMomentum.x)\r\n    ) {\r\n      nextX = 0;\r\n\r\n      this._absorbMomentum('x', remainMomentum.x);\r\n    }\r\n\r\n    if (!this._amplitude.y &&\r\n        this._willOverscroll('y', remainMomentum.y)\r\n    ) {\r\n      nextY = 0;\r\n\r\n      this._absorbMomentum('y', remainMomentum.y);\r\n    }\r\n\r\n    this.scrollbar.setMomentum(nextX, nextY);\r\n    this._render();\r\n  }\r\n\r\n  transformDelta(delta: Data2d, fromEvent: Event): Data2d {\r\n    this._lastEventType = fromEvent.type;\r\n\r\n    if (!this._enabled || !ALLOWED_EVENTS.test(fromEvent.type)) {\r\n      return delta;\r\n    }\r\n\r\n    if (this._isWheelLocked && /wheel/.test(fromEvent.type)) {\r\n      this._releaseWheel();\r\n\r\n      if (this._willOverscroll('x', delta.x)) {\r\n        delta.x = 0;\r\n      }\r\n\r\n      if (this._willOverscroll('y', delta.y)) {\r\n        delta.y = 0;\r\n      }\r\n    }\r\n\r\n    let { x: nextX, y: nextY } = delta;\r\n\r\n    if (this._willOverscroll('x', delta.x)) {\r\n      nextX = 0;\r\n      this._addAmplitude('x', delta.x);\r\n    }\r\n\r\n    if (this._willOverscroll('y', delta.y)) {\r\n      nextY = 0;\r\n      this._addAmplitude('y', delta.y);\r\n    }\r\n\r\n    switch (fromEvent.type) {\r\n      case 'touchstart':\r\n      case 'touchmove':\r\n        this._touching = true;\r\n        this._glow.recordTouch(fromEvent as TouchEvent);\r\n        break;\r\n\r\n      case 'touchcancel':\r\n      case 'touchend':\r\n        this._touching = false;\r\n        break;\r\n    }\r\n\r\n    return {\r\n      x: nextX,\r\n      y: nextY,\r\n    };\r\n  }\r\n\r\n  private _willOverscroll(direction: 'x' | 'y', delta: number): boolean {\r\n    if (!delta) {\r\n      return false;\r\n    }\r\n\r\n    // away from origin\r\n    if (this._position[direction]) {\r\n      return true;\r\n    }\r\n\r\n    const offset = this.scrollbar.offset[direction];\r\n    const limit = this.scrollbar.limit[direction];\r\n\r\n    if (limit === 0) {\r\n      return false;\r\n    }\r\n\r\n    // cond:\r\n    //  1. next scrolling position is supposed to stay unchange\r\n    //  2. current position is on the edge\r\n    return clamp(offset + delta, 0, limit) === offset &&\r\n        (offset === 0 || offset === limit);\r\n  }\r\n\r\n  private _absorbMomentum(direction: 'x' | 'y', remainMomentum: number) {\r\n    const {\r\n      options,\r\n      _lastEventType,\r\n      _amplitude,\r\n    } = this;\r\n\r\n    if (!ALLOWED_EVENTS.test(_lastEventType)) {\r\n      return;\r\n    }\r\n\r\n    _amplitude[direction] = clamp(remainMomentum, -options.maxOverscroll, options.maxOverscroll);\r\n  }\r\n\r\n  private _addAmplitude(direction: 'x' | 'y', delta: number) {\r\n    const {\r\n      options,\r\n      scrollbar,\r\n      _amplitude,\r\n      _position,\r\n    } = this;\r\n\r\n    const currentAmp = _amplitude[direction];\r\n\r\n    const isOpposite = delta * currentAmp < 0;\r\n\r\n    let friction: number;\r\n\r\n    if (isOpposite) {\r\n      // opposite direction\r\n      friction = 0;\r\n    } else {\r\n      friction = this._wheelScrollBack[direction] ?\r\n        1 : Math.abs(currentAmp / options.maxOverscroll);\r\n    }\r\n\r\n    const amp = currentAmp + delta * (1 - friction);\r\n\r\n    _amplitude[direction] = scrollbar.offset[direction] === 0 ?\r\n      /*    top | left  */ clamp(amp, -options.maxOverscroll, 0) :\r\n      /* bottom | right */ clamp(amp, 0, options.maxOverscroll);\r\n\r\n    if (isOpposite) {\r\n      // scroll back\r\n      _position[direction] = _amplitude[direction];\r\n    }\r\n  }\r\n\r\n  private _render() {\r\n    const {\r\n      options,\r\n      _amplitude,\r\n      _position,\r\n    } = this;\r\n\r\n    if (this._enabled &&\r\n        (_amplitude.x || _amplitude.y || _position.x || _position.y)\r\n    ) {\r\n      const nextX = this._nextAmp('x');\r\n      const nextY = this._nextAmp('y');\r\n\r\n      _amplitude.x = nextX.amplitude;\r\n      _position.x = nextX.position;\r\n\r\n      _amplitude.y = nextY.amplitude;\r\n      _position.y = nextY.position;\r\n\r\n      switch (options.effect) {\r\n        case OverscrollEffect.BOUNCE:\r\n          this._bounce.render(_position);\r\n          break;\r\n\r\n        case OverscrollEffect.GLOW:\r\n          this._glow.render(_position, this.options.glowColor);\r\n          break;\r\n      }\r\n\r\n      if (typeof options.onScroll === 'function') {\r\n        options.onScroll.call(this, { ..._position });\r\n      }\r\n    }\r\n  }\r\n\r\n  private _nextAmp(direction: 'x' | 'y'): { amplitude: number, position: number } {\r\n    const {\r\n      options,\r\n      _amplitude,\r\n      _position,\r\n    } = this;\r\n\r\n    const t = 1 - options.damping;\r\n    const amp = _amplitude[direction];\r\n    const pos = _position[direction];\r\n\r\n    const nextAmp = this._touching ? amp : (amp * t | 0);\r\n    const distance = nextAmp - pos;\r\n    const nextPos = pos + distance - (distance * t | 0);\r\n\r\n    if (!this._touching && Math.abs(nextPos) < Math.abs(pos)) {\r\n      this._wheelScrollBack[direction] = true;\r\n    }\r\n\r\n    if (this._wheelScrollBack[direction] && Math.abs(nextPos) <= 1) {\r\n      this._wheelScrollBack[direction] = false;\r\n      this._lockWheel[direction] = true;\r\n    }\r\n\r\n    return {\r\n      amplitude: nextAmp,\r\n      position: nextPos,\r\n    };\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["Bounce", "Glow", "OverscrollEffect", "OverscrollPlugin"]
}
